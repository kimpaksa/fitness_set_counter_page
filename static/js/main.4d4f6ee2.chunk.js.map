{"version":3,"sources":["res/sound/countdown2.mp3","logo.svg","res/sound/COW.mp3","App.js","reportWebVitals.js","index.js"],"names":["App","navigator","vibrate","webkitVibrate","mozVibrate","msVibrate","console","log","useState","count","setCount","viewState","setViewState","setValue","setSetValue","sectime","setSecTime","setTimerInt","intervalData","sound","Audio","sampleAudio","countdownAudio","countdown","changeViewState","data","className","type","value","onChange","e","target","onClick","alert","timer","parseInt","setInterval","play","clearInterval","countUpToRest","style","width","height","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAAe,GCAA,I,gBDAA,IAA0B,wCEA1B,MAA0B,gC,OC0G1BA,MA9Ff,WACIC,UAAUC,QAAUD,UAAUC,SAAWD,UAAUE,eAAiBF,UAAUG,YAAcH,UAAUI,UACtGC,QAAQC,IAAIN,UAAUC,SACtB,MAA0BM,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,mBARjB,GAQjB,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAgCR,mBAAS,GAAzC,mBAAiBS,GAAjB,WACIC,EAAe,KACbC,EAAQ,IAAIC,MAAMC,GAClBC,EAAiB,IAAIF,MAAMG,GAmB3BC,EAAkB,SAACC,GACrBb,EAAaa,IA2BjB,OACI,sBAAKC,UAAU,MAAf,UA9Da,IAgERf,GACG,sBAAKe,UAAU,YAAf,UACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,QAAf,uCACA,qBAAKA,UAAU,UAAf,SACI,uBAAOC,KAAK,OAAOD,UAAU,QAAQE,MAAOf,EAAUgB,SA3C5D,SAACC,GACfhB,EAAYgB,EAAEC,OAAOH,eA6CT,sBAAKF,UAAU,MAAf,UACI,qBAAKA,UAAU,QAAf,+CACA,qBAAKA,UAAU,UAAf,SACI,uBAAOC,KAAK,OAAOD,UAAU,QAAQE,MAAOb,EAASc,SA9CvD,SAACC,GACnBd,EAAWc,EAAEC,OAAOH,OACpBX,EAAYa,EAAEC,OAAOH,eAgDT,wBAAQF,UAAU,aAAaM,QAAS,WAAQR,EA9E/C,IA8ED,6BA9EC,IAsFRb,GACG,yBAAQqB,QAAS,YApDP,WAClB,GAAIvB,GAASI,EAAW,EACpBoB,MAAM,6BACNT,EAvCS,GAwCTd,EAAS,OACN,CACHA,EAASD,EAAQ,GACjB,IAAIyB,EAAQC,SAASpB,GACrBG,EAAekB,aAAY,aACrBF,GACW,GAAKA,GAAS,EACvBZ,EAAee,OAEVH,GAAS,IACVjC,UAAUC,SAEVD,UAAUC,QAAQ,CAAC,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,MAEjGiB,EAAMkB,OACNC,cAAcpB,MAEnB,MA+B0BqB,IAAmBC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SAA7E,UACI,sBAAMF,MAAO,CAAEG,SAAU,QAAzB,SAAoClC,IACpC,sBAAM+B,MAAO,CAAEG,SAAU,OAAzB,wBCtFLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4d4f6ee2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/countdown2.9f3f9481.mp3\";","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/COW.4c8b8149.mp3\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Stack from './Stack/Stack'\nimport countdown from './res/sound/countdown2.mp3'\nimport sampleAudio from './res/sound/COW.mp3'\n\n\nconst VIEW_STATE_1 = 1;\nconst VIEW_STATE_2 = 2;\nconst VIEW_STATE_3 = 3;\n\nfunction App() {\n    navigator.vibrate = navigator.vibrate || navigator.webkitVibrate || navigator.mozVibrate || navigator.msVibrate;\n    console.log(navigator.vibrate);\n    const [count, setCount] = useState(0);\n    const [viewState, setViewState] = useState(VIEW_STATE_1);\n    const [setValue, setSetValue] = useState(10);\n    const [sectime, setSecTime] = useState(60);\n    const [timerInt, setTimerInt] = useState(0);\n    let intervalData = null;\n    const sound = new Audio(sampleAudio);\n    const countdownAudio = new Audio(countdown);\n    // let stackTest = new Stack();\n    // stackTest.push('0');\n    // stackTest.pop();\n\n    /*\n      총 세트수 : 1 ~~~~~\n      Rest Time : 1min 1sec  // REST TIME은 카운트를 올린 시점에 timer 동작. timer 시간이 끝나면 진동으로 알려줌.\n      START\n    */\n\n\n    const changeSet = (e) => {\n        setSetValue(e.target.value);\n    }\n    const changeSecTime = (e) => {\n        setSecTime(e.target.value);\n        setTimerInt(e.target.value)\n    }\n    const changeViewState = (data) => {\n        setViewState(data);\n    }\n    const countUpToRest = () => {\n        if (count >= setValue - 1) {\n            alert(\"운동 완료\");\n            changeViewState(VIEW_STATE_1);\n            setCount(0)\n        } else {\n            setCount(count + 1)\n            let timer = parseInt(sectime);\n            intervalData = setInterval(() => {\n                --timer;\n                if (timer >= 1 && timer <= 3) {\n                    countdownAudio.play();\n                }\n                else if (timer <= 0) {\n                    if (navigator.vibrate) {\n                        // 배열로도 가능하다. 진동은 SOS 모스부호\n                        navigator.vibrate([100, 30, 100, 30, 100, 200, 200, 30, 200, 30, 200, 200, 100, 30, 100, 30, 100]);\n                    }\n                    sound.play();\n                    clearInterval(intervalData)\n                }\n            }, 1000)\n        }\n    }\n\n    return (\n        <div className=\"App\">\n\n            {viewState === VIEW_STATE_1 && (\n                <div className=\"container\">\n                    <div className=\"sub\">\n                        <div className=\"title\">총 세트수</div>\n                        <div className=\"content\">\n                            <input type=\"text\" className=\"input\" value={setValue} onChange={changeSet} />\n                        </div>\n                    </div>\n                    <div className=\"sub\">\n                        <div className=\"title\">휴식(단위:초)</div>\n                        <div className=\"content\">\n                            <input type=\"text\" className=\"input\" value={sectime} onChange={changeSecTime} />\n                        </div>\n                    </div>\n\n                    <button className=\"sub-button\" onClick={() => { changeViewState(VIEW_STATE_2) }}>\n                        시작\n                    </button>\n\n                </div>\n            )}\n\n\n            {viewState === VIEW_STATE_2 && (\n                <button onClick={() => { countUpToRest() }} style={{ width: '100vw', height: '100vh' }}>\n                    <span style={{ fontSize: '17em' }}>{count}</span>\n                    <span style={{ fontSize: '7em' }}>Set</span>\n                </button>\n            )}\n\n        </div>\n    );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}